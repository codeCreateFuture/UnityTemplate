using System.Collections;
using System.Collections.Generic;
using UnityEngine;

public class ZoomGesture : MonoBehaviour {

    private Touch oldTouch1;  //上次触摸点1(手指1)
    private Touch oldTouch2;  //上次触摸点2(手指2)


    public float scaleFactor = 0.1f;
    public float heightFactor = 0.1f;
    public GameObject cube;
    void Update()
    {
#if UNITY_EDITOR
        EditorUpdate();
#else
   PhoneUpdate();
#endif

    }

    Vector3 oldPos1;  
    Vector3 oldPos2;

    public bool isPress = false;
    void EditorUpdate()
    {
       
        if (Input.GetMouseButtonDown(0)&& isTriggle)
        {
           // Debug.Log("GetMouseButtonDown");
            isPress = true;
           // Debug.Log(Input.mousePosition);

            oldPos1 = Input.mousePosition;
            oldPos2 = Camera.main.WorldToScreenPoint(cube.GetComponent<Transform>().position);
        }


        if (Input.GetMouseButton(0)& isTriggle)
        {
            if (!isPress) return;


            //多点触摸, 放大缩小
            Vector3 newTouch1 = Input.mousePosition;
            Vector3 newTouch2 = Camera.main.WorldToScreenPoint(cube.GetComponent<Transform>().position);
            //第2点刚开始接触屏幕, 只记录，不做处理
            //if (newTouch2.phase == TouchPhase.Began)
            //{
            //    oldTouch2 = newTouch2;
            //    oldTouch1 = newTouch1;
            //    return;
            //}
            //计算老的两点距离和新的两点间距离，变大要放大模型，变小要缩放模型
           // float oldDistance = Vector2.Distance(oldPos1, oldPos2);
            //float newDistance = Vector2.Distance(newTouch1, newTouch2);

            float oldDistance = oldPos1.x - oldPos2.x;
            float newDistance = newTouch1.x - newTouch2.x;
            //两个距离之差，为正表示放大手势， 为负表示缩小手势
            float offset = newDistance - oldDistance;

            Debug.Log("oldDistance=" + oldDistance);
            Debug.Log("newDistance=" + newDistance);

            Debug.Log("offset="+offset);
            //放大因子， 一个像素按 0.01倍来算(100可调整)
            float tempScaleFactor = offset *scaleFactor;

            float oldHeight = oldPos1.y - oldPos2.y;
            float newHeight = newTouch1.y - newTouch2.y;
            float heightOffset = newHeight - oldHeight;
            float tempHeightFactor = heightOffset * heightFactor;

            if(Mathf.Abs(offset) > Mathf.Abs(heightOffset))
            {
                Vector3 localScale = transform.localScale;
                Vector3 scale = new Vector3(localScale.x + tempScaleFactor,
                    localScale.y + tempScaleFactor,
                    localScale.z + tempScaleFactor);
                //在什么情况下进行缩放
                if (scale.x >= 0.05f && scale.y >= 0.05f && scale.z >= 0.05f)
                {
                    cube.GetComponent<Transform>().localScale = scale;
                }
            }else
            {
                Vector3 temPos = cube.GetComponent<Transform>().position;
                cube.GetComponent<Transform>().position = new Vector3(temPos.x, temPos.y + tempHeightFactor, temPos.z);
            }

            //记住最新的触摸点，下次使用
            oldPos1 = newTouch1;
            oldPos2 = newTouch2;
        }


        if (Input.GetMouseButtonUp(1))
        {
            isPress = false;
        }



    }

    bool isTriggle = false;
    private void OnMouseDown()
    {
        Debug.Log("mouseDown");
        isTriggle = true;
    }
    private void OnMouseUp()
    {
        Debug.Log("mouse up");
        isTriggle = false;
    }

    void PhoneUpdate()
    {
        //没有触摸，就是触摸点为0
        if (Input.touchCount <= 0)
        {
            return;
        }
        //多点触摸, 放大缩小
        Touch newTouch1 = Input.GetTouch(0);
        Touch newTouch2 = Input.GetTouch(1);
        //第2点刚开始接触屏幕, 只记录，不做处理
        if (newTouch2.phase == TouchPhase.Began)
        {
            oldTouch2 = newTouch2;
            oldTouch1 = newTouch1;
            return;
        }
        //计算老的两点距离和新的两点间距离，变大要放大模型，变小要缩放模型
        float oldDistance = Vector2.Distance(oldTouch1.position, oldTouch2.position);
        float newDistance = Vector2.Distance(newTouch1.position, newTouch2.position);
        //两个距离之差，为正表示放大手势， 为负表示缩小手势
        float offset = newDistance - oldDistance;
        //放大因子， 一个像素按 0.01倍来算(100可调整)
        float scaleFactor = offset / 100f;
        Vector3 localScale = transform.localScale;
        Vector3 scale = new Vector3(localScale.x + scaleFactor,
            localScale.y + scaleFactor,
            localScale.z + scaleFactor);
        //在什么情况下进行缩放
        if (scale.x >= 0.05f && scale.y >= 0.05f && scale.z >= 0.05f)
        {
            transform.localScale = scale;
        }
        //记住最新的触摸点，下次使用
        oldTouch1 = newTouch1;
        oldTouch2 = newTouch2;
    }
}
